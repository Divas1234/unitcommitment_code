#! flag = 1: reheated thermal units
#! flag = 2: reheated thermal units & hydro units
#! flag = 3: reheated thermal units & converter-interfaced units
#! Important change the inertia constant of system frequency parameters when simulating the case 2 and case 3

const whitenoise_parameter = 1e-3
const Œ¥t = 0.05
using Distributions
# JuliaFormatter

function formparameter(temflag)
    D, M, H, T·µ£, F‚Çï, R, K = 1.2, 4.96 * 2, 4.96, 10.8, 0.24, 1 / 20.8, 1.00
    Mg, Hg, Dg, Tg, Rg, Fg, Kg, Œ¥p, endtime = M, H, D, T·µ£, R, F‚Çï, K, 6.1, 60
    # # ------------------log-----------------------
    # # Mw, Hw, Dw, Rw, Re = 2.0, 1.0, 0.3, 1/0.4, 1/0.4
    if temflag == 1
        Mw, Hw, Dw, Rw, Re = 2.0, 1.0, 0.3, 1 / 0.5, 1 / 0.4
        Mg, Hg, Dg = Mg + Mw, Hg + Hw, Dg + Dw + 1 / 0.5 + 1 / 0.4
    end
    # # --------------------------------------------
    return Mg, Hg, Dg, Tg, Rg, Fg, Kg, Œ¥p, endtime
end

function trans_fun_0(Œ¥f‚Çú, Œ¥p_add, Œ¥t, i, flag, temflag)
    Mg, Hg, Dg, Tg, Rg, Fg, Kg, Œ¥p‚ÇÄ, endtime = formparameter(temflag)
    # current mismatch power
    temp_Œ¥p‚Çú = Œ¥p‚ÇÄ - Dg * Œ¥f‚Çú[1] - Œ¥p_add
    # current ROCOF
    grad_Œ¥f‚Çú = temp_Œ¥p‚Çú / (2 * Hg)
    # current frequency change
    temp_Œ¥f‚Çú = Œ¥f‚Çú[1] + grad_Œ¥f‚Çú * Œ¥t
    return temp_Œ¥f‚Çú
end

#process equation
function trans_fun_1(trans_fun_0, ùö´f_pre, Œ¥p_add, Œ¥t, k, flag, Q, temflag)
    Q = 1
    tem = trans_fun_0(ùö´f_pre, Œ¥p_add, Œ¥t, k, flag, temflag)
    if flag == 1
        tem = tem[1] .+ rand(Normal(0, Q), length(ùö´f_pre)) * whitenoise_parameter * 1.0
    end
    if flag == 2
        tem = tem[1] .+ rand(Normal(0, Q), length(ùö´f_pre)) * whitenoise_parameter * (2^(flag - 1))
    end
    if flag >= 2
        tem = tem[1] .+ rand(Normal(0, Q), length(ùö´f_pre)) * whitenoise_parameter * (2 * (flag - 1))
    end
    return tem
end

# ANCHOR
# flag: =1 only thermal unit considered
# flag: =2 both converter-based generators considered
function obs_fun_0(Œ¥f‚Çú_cur, i, flag, temflag)
    # if flag == Int32(1)
    Mg, Hg, Dg, Tg, Rg, Fg, Kg, Œ¥p‚ÇÄ, endtime = formparameter(temflag)
    tem‚ÇÅ, tem‚ÇÇ, tem‚ÇÉ = 0, 0, 0
    Œ±, Œ≤ = Fg * (Kg / Rg) + Mg / Tg, (Dg + 1 / Rg) / Tg
    tem‚ÇÅ = sum(Œ≤ * Œ¥f‚Çú_cur[j, 1] * Œ¥t for j in 1:i)
    tem‚ÇÇ = Œ± * Œ¥f‚Çú_cur[i, 1]
    tem‚ÇÉ = (1 / Tg) * Œ¥p‚ÇÄ * (i * Œ¥t)
    Œ¥p‚Çú_add = tem‚ÇÅ + tem‚ÇÇ - tem‚ÇÉ
    # elseif flag == Int32(2)
    #     Mg, Hg, Dg, Tg, Rg, Fg, Kg, tem, endtime = formparameter()
    #     Œ≤ = (Fg + (1 - Fg) / Tg) * exp(-1.0 / Tg * i * Œ¥t)
    #     Œ¥pg‚Çú_add = (Kg / Rg) * Œ≤ * Œ¥f‚Çú_cur * (-1.0)
    #     # define hydro unit frequency control
    #     Tw, Kw, Rw = 2.00, 1.00, 1.00 / 30
    #     # Œ≥ = 3.0 / (0.50 * Tw) * exp(-2.0 / Tw * (i - 1) * Œ¥t) + 1
    #     Œ≥ =
    #         (6.0 / (Tw - 2 * 8)) * exp(-2.0 / Tw * (i) * Œ¥t) +
    #         (-2.0 / 8.0 + 6.0 / (2 * 8.0 - Tw)) * exp(-1.0 / 8 * (i) * Œ¥t) * 2
    #     if Œ≥ < 0
    #         Œ≥ = 0
    #     end
    #     Œ¥pw‚Çú_add = (Kw / Rw) * Œ≥ * Œ¥f‚Çú_cur * (1.0)
    #     Œ¥p‚Çú_add = Œ¥pg‚Çú_add + Œ¥pw‚Çú_add
    # end
    return Œ¥p‚Çú_add
end

# ANCHOR
# symflag:=0 frequency limit not considered
# symflag:=1 frequency limit considered
#observation equation
function obs_fun_1(obs_fun_0, Œ¥f‚Çú_cur, i, flag, symflag, R, temflag)
    R = 1
    tem = obs_fun_0(Œ¥f‚Çú_cur, i, flag, temflag)
    if flag == 1
        tem = tem + rand(Normal(0, R), length(Œ¥f‚Çú_cur))[1] * whitenoise_parameter * 0.10
    end
    if flag == 2
        tem = tem + rand(Normal(0, R), length(Œ¥f‚Çú_cur))[1] * whitenoise_parameter * (2^(flag - 1))
    end
    return tem
end

function frequencydynamic_ASFR(temflag)
    Mg, Hg, Dg, Tg, Rg, Fg, Kg, Œ¥p, endtime = formparameter(temflag)
    D, M, H, T·µ£, F‚Çï, R, K = Dg, Mg, Hg, Tg, Fg, Rg, Kg
    R = Rg / Kg
    Œ¥p = Œ¥p * 1.0
    w‚Çô = sqrt((D + K / R) / (2 * H * T·µ£))
    Œ∂ = (2 * H + (F‚Çï * (K / R) + D) * T·µ£) / (2 * sqrt(2 * H * T·µ£) * sqrt(D + K / R))
    # Œ∂ = (D * R * T·µ£ + 2 * H * R + F‚Çï * T·µ£) / 2 / (D * R + 1) * w‚Çô
    w·µ£ = w‚Çô * sqrt(1 - Œ∂^2)
    œà = asin(sqrt(1 - Œ∂^2))

    xdata = collect(0:Œ¥t:endtime)
    ydata = zeros(size(xdata, 1), 1)
    f_base = 50

    for i in 1:size(xdata, 1)
        t = xdata[i, 1]
        # Œ¥f = R * Œ¥p / (D * R + 1)
        # Œ¥f = Œ¥f * (1 + Œ± * exp(-1.0 * Œ∂ * w‚Çô * t) * sin(w·µ£ * 1.0 * t + œà))
        Œ¥f = Œ¥p / (2 * H * T·µ£ * (w‚Çô^2))
        Œ¥f =
            Œ¥f +
            Œ¥p / (2 * Hg * w·µ£) * exp(-Œ∂ * w‚Çô * t) * (sin(w·µ£ * t) - 1 / (w‚Çô * T·µ£) * sin(w·µ£ * t + œà))
        ydata[i, 1] = f_base - Œ¥f
    end
    ydata[1:2, 1] = ydata[1:2, 1] .* 1.00
    ydata[:, 1] = ydata[:, 1] .+ 0.0
    different_ASFR = zeros(size(xdata, 1), 1)
    increment_Padd = zeros(size(xdata, 1), 1)
    for i in 1:Int64(size(xdata, 1) - 1)
        different_ASFR[i, 1] = (ydata[i+1, 1] - ydata[i, 1]) / Œ¥t
        str = (Fg + (1 - Fg) / Tg) * exp(-1.0 / Tg * i * Œ¥t)
        increment_Padd[i, 1] = (Kg / Rg) * str * (f_base - ydata[i, 1])
    end
    return ydata, different_ASFR, increment_Padd
end

#initial pdf
function initialize(m, sd=1)
    # return zeros(m, 1)
    # tem = rand(Normal(0, sd), m)
    # tem1 = zeros(size(tem,1), size(tem,2))
    # return tem1

    # version 2
    # return rand(Normal(0, sd), m) * 0 .+ 2
    # version 3
    return rand(Normal(0, sd), m) * whitenoise_parameter
    # return 2
end

function generate_data(initialize, trans_fun_1, obs_fun_1, tt, flag, symflag, temflag)
    Mg, Hg, Dg, Tg, Rg, Fg, Kg, Œ¥p, endtime = formparameter(temflag)
    Œ¥f, Œ¥p_add = fill(0.0, tt), fill(0.0, tt)
    for i in 2:tt
        Œ¥f‚Çú_cur = trans_fun_1(trans_fun_0, Œ¥f[i-1, 1], Œ¥p_add[i-1, 1], Œ¥t, i, flag, 1, temflag)
        Œ¥f[i] = Œ¥f‚Çú_cur[1]
        Œ¥p‚Çú_add = obs_fun_1(obs_fun_0, Œ¥f[1:i, 1], i, flag, symflag, 1, temflag)
        Œ¥p_add[i] = Œ¥p‚Çú_add[1]
    end
    return [Œ¥f, Œ¥p_add]
end

# function conditional_likelihoods(obs_fun_0, y, x, t, flag, R = 1)
#     # h = zeros(size(x,1), 1)
#     # for i in 1:size(x,1)
#     #     h[i,1] = obs_fun_0(x[i])
#     # end
#     h = obs_fun_0.(x, t, flag)
#     likelihoods = pdf.(Normal(0, R), y .- h)
#     return likelihoods
# end

function reconditional_likelihoods(obs_fun_0, Œ¥p_measured, Œ¥f_inference, t, flag, R, temflag)
    R = 1
    sample_Number = size(Œ¥f_inference, 2)
    Œ¥p_prositor = zeros(sample_Number, 1)
    for i in 1:sample_Number
        Œ¥p_prositor[i, 1] = obs_fun_0(Œ¥f_inference[1:t, i], t, flag, temflag)
    end
    likelihoods = pdf.(Normal(0, R), Œ¥p_measured .- Œ¥p_prositor)
    return likelihoods
end

function multi_trans_fun_1(trans_fun_0, Œîf_pre, Œîp_add, Œ¥t, t, flag, symflag, temflag)
    tem = zeros(size(Œîf_pre, 1), 1)
    Œ¥p_add = convert(Float64, Œîp_add[1])
    for i in 1:size(Œîf_pre, 1)
        Œ¥f_pre = convert(Float64, Œîf_pre[i])
        tem[i, 1] = trans_fun_1(trans_fun_0, Œ¥f_pre, Œ¥p_add, Œ¥t, t, flag, symflag, temflag)[1]
    end
    return tem
end

function particle_filter(
    data, initialize, multi_trans_fun_1, reconditional_likelihoods, N, tt, flag, symflag, temflag,
)
    x_true, y_true = data[1], data[2]
    ùö´f_post, ùö´p_post = zeros(tt, N), y_true
    Mg, Hg, Dg, Tg, Rg, Fg, Kg, Œ¥p, endtime = formparameter(temflag)
    Œ¥p = Œ¥p * (-1.0)
    for t in 2:tt
        # Prediction: sample from p(x_k|x_k-1)
        Œ¥f‚Çú_pre = multi_trans_fun_1(
            trans_fun_0, ùö´f_post[t-1, :], ùö´p_post[t-1, 1], Œ¥t, t - 1, flag, 1, temflag,
        )
        ùö´f_post[t, :] = Œ¥f‚Çú_pre
        # Update: compute weights p(y_k|x_k)
        likelihood = reconditional_likelihoods(
            obs_fun_0, y_true[t], ùö´f_post[1:t, :], t, flag, 1, temflag,
        )
        if likelihood == fill(0.0, N)
            Œ¥f‚Çú_post = Œ¥f‚Çú_pre
        else
            likelihood = likelihood ./ sum(likelihood)
            # Resampling: Draw N new particles
            Œ¥f‚Çú_post = wsample(Œ¥f‚Çú_pre[:, 1], likelihood[:, 1], size(Œ¥f‚Çú_pre, 1))
        end
        ùö´f_post[t, :] = Œ¥f‚Çú_post
    end
    sample_SFRdata = zeros(tt, 1)
    for i in 1:tt
        sample_SFRdata[i, 1] = sum(ùö´f_post[i, :]) / N
    end
    return sample_SFRdata, ùö´f_post
end

function simulate(
    generate_data, particle_filter, sample_Num, horizon, flag, symflag, temflag, seed=rand(),
)
    rand(seed)
    N = size(collect(0:Œ¥t:horizon), 1)
    data = generate_data(initialize, trans_fun_1, obs_fun_1, N, flag, symflag, temflag)
    ùö´f_particle_set, ùö´f_post = particle_filter(
        data,
        initialize,
        trans_fun_1,
        reconditional_likelihoods,
        sample_Num,
        N,
        flag,
        symflag,
        temflag,
    )
    # println([size(ùö´f_post,1), size(ùö´f_post,2)])
    # x_expected = mean.(ùö´f_post)
    # return x_expected, data[1], ùö´f_particle_set
    return ùö´f_particle_set, data[1], ùö´f_post
end
